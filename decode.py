from enum import Enum

class ReadableEnum(Enum):
	def __str__(self):
		return self.name.replace('_', ' ').title()

class Source(ReadableEnum):
	PHOTOVOLTAIC = 1
	WIND = 2
	NUCLEAR = 3
	GAS = 4
	HYDRO = 5
	HYDRO_STORAGE = 6
	COAL = 7
	BATTERY = 8

class RoundType(ReadableEnum):
	DAY = 1
	NIGHT = 2
	SLIDE = 3
	SLIDE_RANGE = 4

class WeatherType(ReadableEnum):
	SUNNY = 1
	RAINY = 2
	CLOUDY = 3
	SNOWY = 4
	FOGGY = 5
	WINDY = 6
	CALM = 7
	BREEZY = 8
	PARTLY_CLOUDY = 9

class Building(ReadableEnum):
	CITY_CENTER = 1
	CITY_CENTER_A = 2
	CITY_CENTER_B = 3
	CITY_CENTER_C = 4
	CITY_CENTER_D = 5
	CITY_CENTER_E = 6
	CITY_CENTER_F = 7
	FACTORY = 8
	STADIUM = 9
	HOSPITAL = 10
	UNIVERSITY = 11
	AIRPORT = 12
	SHOPPING_MALL = 13
	TECHNOLOGY_CENTER = 14
	FARM = 15
	LIVING_QUARTER_SMALL = 16
	LIVING_QUARTER_LARGE = 17
	SCHOOL = 18

# --- Standalone Decoder Function ---

def decode_and_print_espdata(data: str):
	"""
	Decodes a hex string generated by the Enak Script class and prints it
	in a human-readable format.
	"""
	print("--- Decoding ESP Data ---")
	ptr = 0

	try:
		# 1. Round Type (2 chars)
		round_type_val = int(data[ptr:ptr+2], 16)
		ptr += 2
		try:
			round_type_str = RoundType(round_type_val).name
		except ValueError:
			round_type_str = f"Unknown ({round_type_val})"
		print(f"Round Type: {round_type_str}")

		# 2. Counts (2 chars for buildings, 2 for sources)
		num_buildings = int(data[ptr:ptr+2], 16)
		ptr += 2
		num_sources = int(data[ptr:ptr+2], 16)
		ptr += 2
		print(f"Building Types: {num_buildings}, Source Types: {num_sources}")

		# 3. Weather Bitmask (2 chars)
		weather_mask = int(data[ptr:ptr+2], 16)
		ptr += 2
		print("\n--- Weather ---")
		if weather_mask == 0:
			print("No weather conditions.")
		else:
			active_weather = [w.name for w in WeatherType if weather_mask & (1 << (w.value - 1))]
			if active_weather:
				for w_name in active_weather:
					print(f"- {w_name}")
			else:
				print("Unknown weather flags.")

		# 4. Building Consumptions (4 chars each)
		print("\n--- Building Consumptions ---")
		building_list = list(Building)
		for i in range(num_buildings):
			consumption = int(data[ptr:ptr+4], 16)
			ptr += 4
			building_name = building_list[i].name if i < len(building_list) else f"Unknown Building {i+1}"
			print(f"{building_name:<25}: {consumption} MW")

		# 5. Production Ranges (8 chars each: 4 for min, 4 for max)
		print("\n--- Production Ranges (Min/Max) ---")
		source_list = list(Source)
		for i in range(num_sources):
			min_prod = int(data[ptr:ptr+4], 16)
			ptr += 4
			max_prod = int(data[ptr:ptr+4], 16)
			ptr += 4
			source_name = source_list[i].name if i < len(source_list) else f"Unknown Source {i+1}"
			print(f"{source_name:<25}: {min_prod} MW / {max_prod} MW")

		print("\n--- End of Data ---")

	except (IndexError, ValueError) as e:
		print(f"\nError decoding data: {e}. The data string may be corrupt or incomplete.")
		print(f"Processed {ptr} characters out of {len(data)}.")

# --- Example Usage ---
if __name__ == "__main__":
	print("Decoding Sample Data:")
	sample_data = "011208000000023f0258026c022602710226019000fa015e019001f4015e012c005000460064005000000000000000000000000000000000000000000000000000fa01f400000000"
	decode_and_print_espdata(sample_data)
